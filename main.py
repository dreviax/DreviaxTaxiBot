import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

TOKEN = "7891694680:AAGGrGmRidKrCUFJ3vsIpSNyUbYEQUxdxjM"
bot = Bot(TOKEN)
dp = Dispatcher(bot)

# –ë–∞–∑–∞
conn = sqlite3.connect("stars_db.sqlite3")
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0
)""")
conn.commit()

# FSM
class Form(StatesGroup):
    refill = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline buttons)
def main_kb(balance: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ë–∞–ª–∞–Ω—Å: ‚≠ê {balance}", callback_data="ignore")],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="refill"),
         InlineKeyboardButton(text="üì§ –í—ã–≤–æ–¥", callback_data="withdraw")],
    ])
    return kb

async def get_balance(user_id: int) -> int:
    cur.execute("SELECT balance FROM users WHERE telegram_id = ?", (user_id,))
    row = cur.fetchone()
    return row[0] if row else 0

async def set_balance(user_id: int, new_balance: int):
    cur.execute("INSERT INTO users(telegram_id, balance) VALUES(?, ?) ON CONFLICT(telegram_id) DO UPDATE SET balance = ?",
                (user_id, new_balance, new_balance))
    conn.commit()

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    bal = await get_balance(user_id)
    await set_balance(user_id, bal)  # –µ—Å–ª–∏ –Ω–æ–≤—ã–π ‚Äî —Å–æ–∑–¥–∞—ë–º
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å ‚≠ê",
        reply_markup=main_kb(bal)
    )

@dp.callback_query(lambda c: c.data == "ignore")
async def on_ignore(cq: types.CallbackQuery):
    await cq.answer()  # no popup

@dp.callback_query(lambda c: c.data == "refill")
async def on_refill(cq: types.CallbackQuery, state: FSMContext):
    await cq.message.answer("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    await state.set_state(Form.refill)

@dp.message(Form.refill)
async def process_refill(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    bal = await get_balance(user_id)
    new_bal = bal + amount
    await set_balance(user_id, new_bal)
    await message.answer(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ ‚≠ê{amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê{new_bal}",
                         reply_markup=main_kb(new_bal))
    await state.clear()

@dp.callback_query(lambda c: c.data == "withdraw")
async def on_withdraw(cq: types.CallbackQuery):
    user_id = cq.from_user.id
    bal = await get_balance(user_id)
    if bal <= 0:
        await cq.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.", show_alert=True)
    else:
        # –ø—Ä–æ—Å—Ç–æ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" –±–∞–ª–∞–Ω—Å –æ–±—Ä–∞—Ç–Ω–æ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_balance(user_id, 0)
        # –º–æ–∂–Ω–æ –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É "–æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–¥–∞-—Ç–æ" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await cq.message.answer(f"üì§ –í—ã–≤–µ–¥–µ–Ω–æ ‚≠ê{bal}. –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ‚≠ê0",
                                 reply_markup=main_kb(0))
    await cq.answer()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling())
